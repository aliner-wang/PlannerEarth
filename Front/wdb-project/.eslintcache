[{"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/index.js":"1","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/App.js":"2","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/Navbar/Navbar.js":"3","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/Navbar/MenuItems.js":"4","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/ToDoList/form.js":"5","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/ToDoList/todolist.js":"6","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/ToDoList/todo.js":"7"},{"size":174,"mtime":1607188881330,"results":"8","hashOfConfig":"9"},{"size":1596,"mtime":1607190140367,"results":"10","hashOfConfig":"9"},{"size":633,"mtime":1607188881329,"results":"11","hashOfConfig":"9"},{"size":125,"mtime":1607188881329,"results":"12","hashOfConfig":"9"},{"size":1051,"mtime":1607189339054,"results":"13","hashOfConfig":"9"},{"size":388,"mtime":1607189253939,"results":"14","hashOfConfig":"9"},{"size":1054,"mtime":1607189263110,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17efix",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/index.js",[],"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/App.js",["33"],"import React, { useState, useEffect} from \"react\";\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar.js\";\nimport Form from './components/ToDoList/form.js';\nimport TodoList from './components/ToDoList/todolist.js'\n\nfunction App() {\n  //Input text = what the person types into the bar for their task\n  const [inputText, setInputText] = useState(\"\");\n  //List of all todos\n  const [todos, setTodos] = useState([]);\n  //Filter status - if they want to see all, completed, uncompleted, important tasks\n  const [status, setStatus] = useState(\"all\");\n  //List of filtered todos - needed another list bc user might click all again and want original list saved as well\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    filterHandler();\n  }, [todos, status]);\n\n  //Filter out what the user wants to see based on category\n  const filterHandler = () => {\n    switch(status) {\n      case(\"completed\"):\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case(\"uncompleted\"):\n        setFilteredTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setFilteredTodos(todos)\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n    <Navbar />\n    <header>\n      <h1> My To-Do List</h1>\n    </header>\n    <Form\n      todos={todos} setTodos={setTodos} setInputText = {setInputText}\n      inputText={inputText} status={status} setStatus={setStatus}/>\n\n      <TodoList setTodos={setTodos} todos={todos} filteredTodos = {filteredTodos}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/Navbar/Navbar.js",["34"],"import React, { Component } from 'react';\nimport { MenuItems} from \"./MenuItems\";\nimport './Navbar.css';\n\nclass Navbar extends Component {\n  render() {\n    return(\n      <nav className=\"navbarItems\">\n        <div className=\"menu-icon\">\n\n        </div>\n        {/* The ul tags below create the items in the nav bar. */}\n        <ul>\n          {MenuItems.map((item, index) => {\n            return(\n              <li key={index}>\n                <a className={item.cName}>\n                  {item.label}\n                </a>\n              </li>\n            )\n          })}\n        </ul>\n      </nav>\n\n    )\n  }\n}\n\nexport default Navbar\n",["35","36"],"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/Navbar/MenuItems.js",[],"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/ToDoList/form.js",[],"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/ToDoList/todolist.js",[],"/Users/j/Desktop/finalplanner/PlannerEarth/Front/wdb-project/src/components/ToDoList/todo.js",[],{"ruleId":"37","severity":1,"message":"38","line":19,"column":6,"nodeType":"39","endLine":19,"endColumn":21,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":17,"column":17,"nodeType":"43","endLine":17,"endColumn":43},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterHandler'. Either include it or remove the dependency array.","ArrayExpression",["48"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["49"],"no-negated-in-lhs",["50"],{"desc":"51","fix":"52"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [todos, status, filterHandler]",{"range":"53","text":"54"},[782,797],"[todos, status, filterHandler]"]